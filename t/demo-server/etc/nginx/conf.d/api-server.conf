server {
    listen 8100;
    server_name _;
    root /usr/local/openresty/nginx/html;
    
    charset utf-8;
    index index.php index.html index.htm;

    access_log /var/log/nginx/access.api-server.log  main;
    error_log /var/log/nginx/error.api-server.log;

    autoindex off;

    location /login {
        access_by_lua_block {
            local aes = require "resty.aes"
            local str = require "resty.string"
            local cjson = require "cjson"

            local key = "12345678901234567890123456789012"  
            local iv = "1234567890123456"  
            local aes_256_cbc = assert(aes:new(key, nil, aes.cipher(256, "cbc"), {iv=iv}))

            local args = ngx.req.get_uri_args()
            local userId = args.userId or ""
            if userId == "" then
                ngx.req.read_body()
                args, _ = ngx.req.get_post_args()
                if not args then
                    args = {}
                end
                userId = args.userId or ""
            end

            local encrypted = aes_256_cbc:encrypt(userId)
            local encrypted_hex = str.to_hex(encrypted)

            local response = {
                uri = ngx.var.uri,
                type = "Login And Generate DeviceId Interface",
                time = ngx.time(),
                userId = userId,
                deviceId = encrypted_hex
            }

            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }

    location /guest/ {
        access_by_lua_block {
            local cjson = require "cjson"
            local response = {
                uri = ngx.var.uri,
                type = "Guest Interface",
                time = ngx.time()
            }
            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }

    location /io/ {
        access_by_lua_block {
            local cjson = require "cjson"
            local response = {
                uri = ngx.var.uri,
                type = "I/O Interface",
                time = ngx.time()
            }
            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }

    location /key/ {
        access_by_lua_block {
            local cjson = require "cjson"
            local response = {
                uri = ngx.var.uri,
                type = "Key Business Interface",
                time = ngx.time()
            }
            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }

    location /check-device-id {
        allow  127.0.0.1;
        deny  all;
        
        access_by_lua_block {
            local aes = require "resty.aes"
            local str = require "resty.string"
            local cjson = require "cjson"

            local key = "12345678901234567890123456789012"  
            local iv = "1234567890123456"  
            local aes_256_cbc = assert(aes:new(key, nil, aes.cipher(256, "cbc"), {iv=iv}))
            
            local response = {
                valid = false,
                expired_seconds = 1800
            }

            ngx.req.read_body()
            local body_data = ngx.req.get_body_data()
            local args, err
            if not body_data then
                err = "failed to read request body"
            else
                args, err = cjson.decode(body_data)
            end
            if not args then
                ngx.log(ngx.ERR, "failed to decode JSON: ", err)
                args = {}
            end

            local encrypted_data_hex = args.device_id or ""
            if encrypted_data_hex ~= "" then
                local encrypted_data = encrypted_data_hex:gsub('..', function(h) return string.char(tonumber(h, 16)) end)
                local decrypted = aes_256_cbc:decrypt(encrypted_data)
                if decrypted then
                    response.valid = true
                else
                    ngx.log(ngx.ERR, 'check-device-id[' .. deviceId .. '] failed: ', cjson.encode(args))
                end
            end
            
            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }

    location / {
        access_by_lua_block {
            local cjson = require "cjson"
            local response = {
                uri = ngx.var.uri,
                type = "Normal Interface",
                time = ngx.time()
            }
            ngx.header.content_type = 'application/json; charset=utf-8'
            ngx.say(cjson.encode(response))
            ngx.exit(200)
        }
    }
}
